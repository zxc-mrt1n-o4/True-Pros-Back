import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';

dotenv.config();

const token = process.env.TELEGRAM_BOT_TOKEN;
const workersGroupId = process.env.TELEGRAM_WORKERS_GROUP_ID;
const workersTopicId = process.env.TELEGRAM_WORKERS_TOPIC_ID;

if (!token) {
  throw new Error('TELEGRAM_BOT_TOKEN is required');
}

// Create bot instance with polling enabled
export const bot = new TelegramBot(token, { polling: true });

// Russian text templates
const messages = {
  newCallback: (data) => `
üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫*

üë§ *–ò–º—è:* ${data.name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone}
üîß *–£—Å–ª—É–≥–∞:* ${data.service_type || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üïê *–í—Ä–µ–º—è:* ${new Date(data.created_at).toLocaleString('ru-RU')}
üÜî *ID –∑–∞—è–≤–∫–∏:* \`${data.id}\`

üìã *–°—Ç–∞—Ç—É—Å:* ${getStatusText(data.status)}
`,

  callbackCompleted: (data) => `
‚úÖ *–ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞*

üÜî *ID:* \`${data.id}\`
üë§ *–ö–ª–∏–µ–Ω—Ç:* ${data.name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone}
üë®‚Äçüîß *–í—ã–ø–æ–ª–Ω–∏–ª:* ${data.completed_by || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üïê *–ó–∞–≤–µ—Ä—à–µ–Ω–æ:* ${new Date(data.completed_at).toLocaleString('ru-RU')}
`,

  systemMessage: (message) => `
‚ÑπÔ∏è *–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*

${message}
`,

  error: (error) => `
‚ùå *–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã*

\`${error}\`
`
};

// Status translations
const getStatusText = (status) => {
  const statusMap = {
    'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
    'in_progress': 'üîÑ –í —Ä–∞–±–æ—Ç–µ',
    'contacted': 'üìû –°–≤—è–∑–∞–ª–∏—Å—å',
    'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ',
    'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ'
  };
  return statusMap[status] || status;
};

// Send message to workers group
export const sendToWorkersGroup = async (message, options = {}) => {
  try {
    if (!workersGroupId) {
      console.warn('‚ö†Ô∏è TELEGRAM_WORKERS_GROUP_ID not configured');
      return null;
    }

    const sendOptions = {
      parse_mode: 'Markdown',
      disable_web_page_preview: true,
      ...options
    };

    // Add topic ID if specified
    if (workersTopicId) {
      sendOptions.message_thread_id = parseInt(workersTopicId);
    }

    const result = await bot.sendMessage(workersGroupId, message, sendOptions);
    console.log('‚úÖ Message sent to workers group');
    return result;
  } catch (error) {
    console.error('‚ùå Failed to send message to workers group:', error.message);
    return null;
  }
};

// Send direct message to user
export const sendDirectMessage = async (chatId, message, options = {}) => {
  try {
    const sendOptions = {
      parse_mode: 'Markdown',
      disable_web_page_preview: true,
      ...options
    };

    const result = await bot.sendMessage(chatId, message, sendOptions);
    console.log(`‚úÖ Direct message sent to ${chatId}`);
    return result;
  } catch (error) {
    console.error(`‚ùå Failed to send direct message to ${chatId}:`, error.message);
    return null;
  }
};

// Simple edit message for info collection only
const editInfoMessage = async (chatId, message, messageId) => {
  try {
    const result = await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      disable_web_page_preview: true
    });
    console.log(`‚úÖ Info message edited for ${chatId}`);
    return result;
  } catch (error) {
    console.log(`‚ö†Ô∏è Edit failed, sending new message: ${error.message}`);
    // If edit fails, send new message
    return await sendDirectMessage(chatId, message);
  }
};

// Send new callback notification
export const notifyNewCallback = async (callbackData) => {
  const message = messages.newCallback(callbackData);
  
  // Create inline keyboard for quick actions - only show initial buttons
  const keyboard = {
    inline_keyboard: [
      [
        { text: '‚úÖ –°–≤—è–∑–∞–ª–∏—Å—å', callback_data: `contacted_${callbackData.id}` },
        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_${callbackData.id}` }
      ]
    ]
  };

  // Send to workers group and store message ID for editing
  const sentMessage = await sendToWorkersGroup(message, { reply_markup: keyboard });
  if (sentMessage && sentMessage.message_id) {
    groupMessages.set(callbackData.id, {
      messageId: sentMessage.message_id,
      chatId: sentMessage.chat.id
    });
  }
  
  return true;
};

// Send callback completion notification (now handled by message editing)
export const notifyCallbackCompleted = async (callbackData) => {
  // No longer send new messages for completion - handled by updateGroupMessage
  console.log(`‚úÖ Callback ${callbackData.id} completed, message updated via button press`);
  return true;
};

// Send system notification
export const sendSystemNotification = async (messageText) => {
  const message = messages.systemMessage(messageText);
  await sendToWorkersGroup(message);
  return true;
};

// Send error notification
export const sendErrorNotification = async (error) => {
  const message = messages.error(error);
  await sendToWorkersGroup(message);
  return true;
};

// Store user states for scheduling
const userStates = new Map();
const scheduledJobs = new Map(); // Store scheduled reminders
const groupMessages = new Map(); // Store group message IDs by callback ID for editing

// Start collecting additional information from worker
const startInfoCollection = async (userId, callbackId, userName) => {
  try {
    const { getCallbackById } = await import('./callbackService.js');
    const callback = await getCallbackById(callbackId);
    
    if (!callback) {
      await sendDirectMessage(userId, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const infoMessage = `
üìã *–ó–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º*

üÜî *–ó–∞—è–≤–∫–∞:* ${callbackId}
üë§ *–ö–ª–∏–µ–Ω—Ç:* ${callback.name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${callback.phone}
üîß *–£—Å–ª—É–≥–∞:* ${callback.service_type || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üìù *–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:*

*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞:*
`;

    // Send initial message and store its ID for editing
    const sentMessage = await sendDirectMessage(userId, infoMessage);
    
    // Set user state for info collection
    userStates.set(userId, {
      action: 'collecting_address',
      callbackId: callbackId,
      userName: userName,
      collectedInfo: {},
      infoMessageId: sentMessage ? sentMessage.message_id : null
    });
  } catch (error) {
    console.error('‚ùå Error starting info collection:', error);
    await sendDirectMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
  }
};

// Send scheduling request to worker in DM
const sendSchedulingRequest = async (userId, callbackId, userName) => {
  try {
    const { getCallbackById, updateCallbackStatus } = await import('./callbackService.js');
    const callback = await getCallbackById(callbackId);
    
    if (!callback) {
      await sendDirectMessage(userId, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // Update status to in_progress when scheduling starts
    await updateCallbackStatus(callbackId, {
      status: 'in_progress',
      updated_at: new Date().toISOString()
    });

    const schedulingMessage = `
üìÖ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞*

üÜî *–ó–∞—è–≤–∫–∞:* ${callbackId}
üë§ *–ö–ª–∏–µ–Ω—Ç:* ${callback.name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${callback.phone}
üìç *–ê–¥—Ä–µ—Å:* ${callback.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üîß *–£—Å–ª—É–≥–∞:* ${callback.detailed_service_type || callback.service_type || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
${callback.problem_description ? `‚ùì *–ü—Ä–æ–±–ª–µ–º–∞:* ${callback.problem_description}` : ''}

üìù *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:*
\`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\`

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ \`25.12.2024 14:30\`
‚Ä¢ \`01.01.2025 09:00\`
‚Ä¢ \`15.06.2025 16:45\`

üí° *–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*
`;

    // Set user state for scheduling
    userStates.set(userId, {
      action: 'scheduling',
      callbackId: callbackId,
      userName: userName
    });

    await sendDirectMessage(userId, schedulingMessage);
  } catch (error) {
    console.error('‚ùå Error sending scheduling request:', error);
    await sendDirectMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
  }
};

// Handle callback queries (button presses)
export const handleCallbackQuery = async (callbackQuery) => {
  console.log('üîò Callback query received:', callbackQuery.data, 'from user:', callbackQuery.from.first_name);
  
  const { data, from, message } = callbackQuery;
  
  // Handle different callback data formats
  let action, callbackId;
  if (data.startsWith('schedule_pending_')) {
    action = 'schedule_pending';
    callbackId = data.replace('schedule_pending_', '');
  } else {
    [action, callbackId] = data.split('_');
  }
  
  const userName = from.first_name || '–†–∞–±–æ—Ç–Ω–∏–∫';
  const userId = from.id;
  
  try {
    // Import here to avoid circular dependency
    const { updateCallbackStatus, getCallbackById } = await import('./callbackService.js');
    
    let statusUpdate = {};
    let responseText = '';
    let newKeyboard = null;
    
    switch (action) {
      case 'contacted':
        statusUpdate = { 
          status: 'contacted',
          updated_at: new Date().toISOString(),
          assigned_to: userName,
          assigned_user_id: userId
        };
        responseText = `üìû –°–≤—è–∑–∞–ª–∏—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º (${userName}) - –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞`;
        
        // Start collecting additional information in DM
        await startInfoCollection(userId, callbackId, userName);
        
        // Remove all buttons from group message - worker will handle in DM
        newKeyboard = { inline_keyboard: [] };
        break;
        
      case 'cancel':
        statusUpdate = { 
          status: 'cancelled',
          updated_at: new Date().toISOString()
        };
        responseText = `‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ (${userName})`;
        
        // Remove all buttons when cancelled
        newKeyboard = { inline_keyboard: [] };
        break;
        
      case 'schedule':
        // Start scheduling process
        await sendSchedulingRequest(userId, callbackId, userName);
        responseText = `üìÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`;
        break;
        
      case 'schedule_pending':
        // Start scheduling process for pending client
        await sendSchedulingRequest(userId, callbackId, userName);
        responseText = `üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞ –Ω–∞—á–∞—Ç–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö`;
        
        // Remove the button from the pending message
        newKeyboard = { inline_keyboard: [] };
        break;
        
      case 'complete':
        statusUpdate = { 
          status: 'completed',
          updated_at: new Date().toISOString(),
          completed_at: new Date().toISOString(),
          completed_by: userName
        };
        responseText = `‚úÖ –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (${userName})`;
        
        // Remove the complete button
        newKeyboard = { inline_keyboard: [] };
        break;
        
      default:
        responseText = '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ';
    }
    
    // Update status in database if needed
    if (Object.keys(statusUpdate).length > 0) {
      await updateCallbackStatus(callbackId, statusUpdate);
    }
    
    // Send response
    await bot.answerCallbackQuery(callbackQuery.id, { text: responseText });
    
    // Update the original group message if it exists
    await updateGroupMessage(callbackId, responseText, newKeyboard);
    
  } catch (error) {
    console.error('‚ùå Error handling callback query:', error);
    await bot.answerCallbackQuery(callbackQuery.id, { 
      text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞' 
    });
  }
};

// Update the original group message with status changes
const updateGroupMessage = async (callbackId, statusText, newKeyboard) => {
  try {
    const messageData = groupMessages.get(callbackId);
    if (!messageData) {
      console.log(`‚ö†Ô∏è No group message found for callback ${callbackId}`);
      return;
    }

    const { getCallbackById } = await import('./callbackService.js');
    const callback = await getCallbackById(callbackId);
    
    if (!callback) {
      console.log(`‚ö†Ô∏è Callback ${callbackId} not found for message update`);
      return;
    }

    // Regenerate the original message with current data
    const originalMessage = messages.newCallback(callback);
    const updatedMessage = originalMessage + `\n\nüîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:* ${statusText}`;

    await bot.editMessageText(updatedMessage, {
      chat_id: messageData.chatId,
      message_id: messageData.messageId,
      parse_mode: 'Markdown',
      reply_markup: newKeyboard
    });

    console.log(`‚úÖ Group message updated for callback ${callbackId}`);
  } catch (error) {
    console.error(`‚ùå Error updating group message for callback ${callbackId}:`, error.message);
  }
};

// Parse date and time from user input
const parseDateTime = (dateTimeString) => {
  try {
    // Expected format: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú
    const regex = /^(\d{2})\.(\d{2})\.(\d{4})\s+(\d{2}):(\d{2})$/;
    const match = dateTimeString.trim().match(regex);
    
    if (!match) {
      return null;
    }
    
    const [, day, month, year, hours, minutes] = match;
    const date = new Date(year, month - 1, day, hours, minutes);
    
    // Check if date is valid and in the future
    if (isNaN(date.getTime()) || date <= new Date()) {
      return null;
    }
    
    return date;
  } catch (error) {
    return null;
  }
};

// Schedule reminder 45 minutes before appointment
const scheduleReminder = (userId, callbackId, appointmentDate, clientName, serviceType) => {
  const reminderTime = new Date(appointmentDate.getTime() - 45 * 60 * 1000); // 45 minutes before
  const now = new Date();
  
  if (reminderTime <= now) {
    console.log('‚ö†Ô∏è Reminder time is in the past, skipping');
    return;
  }
  
  const timeoutMs = reminderTime.getTime() - now.getTime();
  
  const timeoutId = setTimeout(async () => {
    const reminderMessage = `
‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∏–∑–∏—Ç–µ*

üïê *–ß–µ—Ä–µ–∑ 45 –º–∏–Ω—É—Ç:* ${appointmentDate.toLocaleString('ru-RU')}
üÜî *–ó–∞—è–≤–∫–∞:* ${callbackId}
üë§ *–ö–ª–∏–µ–Ω—Ç:* ${clientName}
üîß *–£—Å–ª—É–≥–∞:* ${serviceType || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üìç *–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤–∏–∑–∏—Ç—É!*
`;
    
    await sendDirectMessage(userId, reminderMessage);
    scheduledJobs.delete(`${callbackId}_${userId}`);
  }, timeoutMs);
  
  // Store the timeout ID for potential cancellation
  scheduledJobs.set(`${callbackId}_${userId}`, {
    timeoutId,
    appointmentDate,
    clientName,
    serviceType,
    callbackId
  });
  
  console.log(`‚è∞ Reminder scheduled for ${reminderTime.toLocaleString('ru-RU')}`);
};

// Handle info collection process
const handleInfoCollection = async (chatId, messageText, userState) => {
  try {
    if (messageText === '/cancel') {
      userStates.delete(chatId);
      await sendDirectMessage(chatId, '‚ùå –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω');
      return;
    }

    const { action, callbackId, userName, collectedInfo, infoMessageId } = userState;

    switch (action) {
      case 'collecting_address':
        collectedInfo.address = messageText.trim();
        userState.action = 'collecting_service_type';
        userStates.set(chatId, userState);
        
        const serviceMessage = `
üìç *–ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:* ${messageText.trim()}

üîß *–¢–µ–ø–µ—Ä—å —É—Ç–æ—á–Ω–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:*
(–Ω–∞–ø—Ä–∏–º–µ—Ä: "–†–µ–º–æ–Ω—Ç —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞", "–ó–∞–º–µ–Ω–∞ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã")
`;
        
        if (infoMessageId) {
          await editInfoMessage(chatId, serviceMessage, infoMessageId);
        } else {
          await sendDirectMessage(chatId, serviceMessage);
        }
        break;

      case 'collecting_service_type':
        collectedInfo.detailedServiceType = messageText.trim();
        userState.action = 'collecting_problem';
        userStates.set(chatId, userState);
        
        const problemMessage = `
üîß *–¢–∏–ø —É—Å–ª—É–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:* ${messageText.trim()}

‚ùì *–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):*
–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
`;
        
        if (infoMessageId) {
          await editInfoMessage(chatId, problemMessage, infoMessageId);
        } else {
          await sendDirectMessage(chatId, problemMessage);
        }
        break;

      case 'collecting_problem':
        const problemDescription = messageText.trim() === '-' ? null : messageText.trim();
        collectedInfo.problemDescription = problemDescription;
        
        // Save all collected info to database
        await saveCollectedInfo(callbackId, collectedInfo);
        
        // Send detailed request with schedule button
        await sendDetailedRequest(chatId, callbackId, userName, collectedInfo);
        
        // Clear user state
        userStates.delete(chatId);
        break;

      default:
        await sendDirectMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è —Å–±—Ä–æ—Å–∞.');
    }
  } catch (error) {
    console.error('‚ùå Error handling info collection:', error);
    await sendDirectMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
};

// Save collected information to database
const saveCollectedInfo = async (callbackId, collectedInfo) => {
  try {
    const { updateCallbackStatus } = await import('./callbackService.js');
    
    const updates = {
      address: collectedInfo.address,
      detailed_service_type: collectedInfo.detailedServiceType,
      problem_description: collectedInfo.problemDescription,
      updated_at: new Date().toISOString()
    };
    
    await updateCallbackStatus(callbackId, updates);
    console.log(`‚úÖ Additional info saved for callback ${callbackId}`);
  } catch (error) {
    console.error('‚ùå Error saving collected info:', error);
    throw error;
  }
};

// Send detailed request with schedule button
const sendDetailedRequest = async (userId, callbackId, userName, collectedInfo) => {
  try {
    const { getCallbackById } = await import('./callbackService.js');
    const callback = await getCallbackById(callbackId);
    
    if (!callback) {
      await sendDirectMessage(userId, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const detailedMessage = `
‚úÖ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞*

üÜî *–ó–∞—è–≤–∫–∞:* ${callbackId}
üë§ *–ö–ª–∏–µ–Ω—Ç:* ${callback.name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${callback.phone}
üìç *–ê–¥—Ä–µ—Å:* ${collectedInfo.address}
üîß *–£—Å–ª—É–≥–∞:* ${collectedInfo.detailedServiceType}
${collectedInfo.problemDescription ? `‚ùì *–ü—Ä–æ–±–ª–µ–º–∞:* ${collectedInfo.problemDescription}` : ''}

üìÖ *–ì–æ—Ç–æ–≤–æ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –≤–∏–∑–∏—Ç–∞*
`;

    const scheduleKeyboard = {
      inline_keyboard: [
        [
          { text: 'üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑–∏—Ç', callback_data: `schedule_${callbackId}` }
        ]
      ]
    };

    await sendDirectMessage(userId, detailedMessage, { reply_markup: scheduleKeyboard });
  } catch (error) {
    console.error('‚ùå Error sending detailed request:', error);
    await sendDirectMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
  }
};

// Get user's scheduled appointments (only those with actual appointment dates)
const getUserSchedule = async (userId) => {
  try {
    const { getAllCallbacks } = await import('./callbackService.js');
    
    // Get all callbacks assigned to this user that are not completed
    const result = await getAllCallbacks({
      page: 1,
      limit: 100,
      sortBy: 'created_at',
      sortOrder: 'desc'
    });
    
    // Filter for this user's assignments that are not completed
    const userCallbacks = result.data.filter(callback => 
      callback.assigned_user_id === userId && 
      callback.status !== 'completed' && 
      callback.status !== 'cancelled'
    );
    
    // Get scheduled jobs from memory for appointment times
    const userScheduledJobs = [];
    for (const [key, job] of scheduledJobs.entries()) {
      if (key.includes(`_${userId}`)) {
        userScheduledJobs.push(job);
      }
    }
    
    // Only return callbacks that have scheduled appointments
    const scheduledCallbacks = userCallbacks
      .map(callback => {
        const scheduledJob = userScheduledJobs.find(job => job.callbackId === callback.id);
        if (!scheduledJob) return null; // Skip if no appointment scheduled
        
        return {
          callbackId: callback.id,
          clientName: callback.name,
          phone: callback.phone,
          address: callback.address,
          detailedServiceType: callback.detailed_service_type,
          problemDescription: callback.problem_description,
          status: callback.status,
          appointmentDate: scheduledJob.appointmentDate
        };
      })
      .filter(callback => callback !== null) // Remove null entries
      .sort((a, b) => a.appointmentDate - b.appointmentDate); // Sort by appointment time
    
    return scheduledCallbacks;
    
  } catch (error) {
    console.error('‚ùå Error getting user schedule:', error);
    return [];
  }
};

// Get user's pending clients (contacted but not scheduled yet)
const getUserPendingClients = async (userId) => {
  try {
    const { getAllCallbacks } = await import('./callbackService.js');
    
    // Get all callbacks assigned to this user that are contacted but not scheduled yet
    const result = await getAllCallbacks({
      page: 1,
      limit: 100,
      sortBy: 'created_at',
      sortOrder: 'desc'
    });
    
    // Filter for this user's assignments that are contacted with complete info but not scheduled yet
    const pendingCallbacks = result.data.filter(callback => 
      callback.assigned_user_id === userId && 
      callback.status === 'contacted' &&
      callback.address && // Has collected info
      callback.detailed_service_type &&
      !scheduledJobs.has(`${callback.id}_${userId}`) // Not scheduled yet
    );
    
    return pendingCallbacks.map(callback => ({
      callbackId: callback.id,
      clientName: callback.name,
      phone: callback.phone,
      address: callback.address,
      detailedServiceType: callback.detailed_service_type,
      problemDescription: callback.problem_description,
      status: callback.status,
      createdAt: callback.created_at
    }));
    
  } catch (error) {
    console.error('‚ùå Error getting user pending clients:', error);
    return [];
  }
};

// Handle /start command and other messages
const handleDirectMessage = async (msg) => {
  const chatId = msg.chat.id;
  const messageText = msg.text;
  const userName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  console.log(`üì® Received message from ${userName} (${chatId}): ${messageText}`);

  // Check if user is in any interactive mode
  const userState = userStates.get(chatId);
  
  // Handle info collection states
  if (userState && userState.action.startsWith('collecting_')) {
    await handleInfoCollection(chatId, messageText, userState);
    return;
  }
  
  if (userState && userState.action === 'scheduling') {
    if (messageText === '/cancel') {
      userStates.delete(chatId);
      await sendDirectMessage(chatId, '‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      return;
    }
    
    // Try to parse the date and time
    const appointmentDate = parseDateTime(messageText);
    
    if (!appointmentDate) {
      await sendDirectMessage(chatId, `
‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏*

üìù *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:* \`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\`

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ \`25.12.2024 14:30\`
‚Ä¢ \`01.01.2025 09:00\`
‚Ä¢ \`15.06.2025 16:45\`

üí° *–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã*
`);
      return;
    }
    
    // Save the appointment and set reminder
    try {
      const { getCallbackById } = await import('./callbackService.js');
      const callback = await getCallbackById(userState.callbackId);
      
      if (callback) {
        // Schedule the reminder
        scheduleReminder(chatId, userState.callbackId, appointmentDate, callback.name, callback.service_type);
        
        const confirmationMessage = `
‚úÖ *–í–∏–∑–∏—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω*

üìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* ${appointmentDate.toLocaleString('ru-RU')}
üÜî *–ó–∞—è–≤–∫–∞:* ${userState.callbackId}
üë§ *–ö–ª–∏–µ–Ω—Ç:* ${callback.name}
üìç *–ê–¥—Ä–µ—Å:* ${callback.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üîß *–£—Å–ª—É–≥–∞:* ${callback.detailed_service_type || callback.service_type || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
${callback.problem_description ? `‚ùì *–ü—Ä–æ–±–ª–µ–º–∞:* ${callback.problem_description}` : ''}

‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ 45 –º–∏–Ω—É—Ç –¥–æ –≤–∏–∑–∏—Ç–∞*

üìã *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /schedule –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤*
`;

        const completeKeyboard = {
          inline_keyboard: [
            [
              { text: '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `complete_${userState.callbackId}` }
            ]
          ]
        };
        
        await sendDirectMessage(chatId, confirmationMessage, { reply_markup: completeKeyboard });
        
        // Update the original group message with scheduled status
        const scheduledStatusText = `üìÖ –í–∏–∑–∏—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${appointmentDate.toLocaleString('ru-RU')} (${userState.userName})`;
        await updateGroupMessage(userState.callbackId, scheduledStatusText, { inline_keyboard: [] });
      }
      
      // Clear user state
      userStates.delete(chatId);
      
    } catch (error) {
      console.error('‚ùå Error saving appointment:', error);
      await sendDirectMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–∑–∏—Ç–∞');
    }
    
    return;
  }

  if (messageText === '/start') {
    const welcomeMessage = `
üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}!*

üîß *True Pros - –†–µ–º–æ–Ω—Ç –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏*

–Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞—è–≤–∫–∞—Ö –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫.

üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ü–æ–º–æ—â—å
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/pending - –ö–ª–∏–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é

üåê *–ù–∞—à —Å–∞–π—Ç:* [True Pros](http://localhost:3000)

üìû *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
1. –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ —Å–∞–π—Ç–µ
2. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
3. –ú–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏

üíº *–î–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤:* –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö.
`;

    await sendDirectMessage(chatId, welcomeMessage);
  } else if (messageText === '/help') {
    const helpMessage = `
‚ÑπÔ∏è *–ü–æ–º–æ—â—å - True Pros Bot*

ü§ñ *–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å–∞–º–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏

üì± *–ö–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/schedule - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã
/pending - –ö–ª–∏–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

üîß *–î–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤:*
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–ø–∏–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏
‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤–∏–∑–∏—Ç—ã —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
`;

    await sendDirectMessage(chatId, helpMessage);
  } else if (messageText === '/status') {
    const statusMessage = `
üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã True Pros*

‚úÖ *–ë–æ—Ç:* –†–∞–±–æ—Ç–∞–µ—Ç
üóÑÔ∏è *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:* –ü–æ–¥–∫–ª—é—á–µ–Ω–∞
üì° *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* –ê–∫—Ç–∏–≤–Ω—ã
üïê *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}

üîÑ *–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:* –¢–æ–ª—å–∫–æ —á—Ç–æ

üíö –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!
`;

    await sendDirectMessage(chatId, statusMessage);
  } else if (messageText === '/schedule') {
    const userSchedule = await getUserSchedule(chatId);
    
    if (userSchedule.length === 0) {
      const noScheduleMessage = `
üìÖ *–í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã*

üì≠ *–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤*

üí° *–ß—Ç–æ–±—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑–∏—Ç:*
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pending –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤
2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑–∏—Ç"
3. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
`;
      
      await sendDirectMessage(chatId, noScheduleMessage);
    } else {
      let scheduleMessage = `üìÖ *–í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã*\n\n`;
      
      userSchedule.forEach((callback, index) => {
        scheduleMessage += `${index + 1}. üë§ *${callback.clientName}*\n`;
        scheduleMessage += `   üìû ${callback.phone}\n`;
        scheduleMessage += `   üìç ${callback.address}\n`;
        
        // Build service description
        let serviceDescription = callback.detailedServiceType || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        if (callback.problemDescription) {
          serviceDescription += `, ${callback.problemDescription}`;
        }
        scheduleMessage += `   üîß ${serviceDescription}\n`;
        
        // Show appointment time and status
        const timeUntil = callback.appointmentDate.getTime() - new Date().getTime();
        const hoursUntil = Math.round(timeUntil / (1000 * 60 * 60));
        
        scheduleMessage += `   üìÖ ${callback.appointmentDate.toLocaleString('ru-RU')}\n`;
        
        if (hoursUntil > 0) {
          scheduleMessage += `   ‚è∞ –ß–µ—Ä–µ–∑ ${hoursUntil} —á.\n`;
        } else if (hoursUntil > -24) {
          scheduleMessage += `   üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ\n`;
        } else {
          scheduleMessage += `   üî¥ –î–∞–≤–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ\n`;
        }
        
        scheduleMessage += `\n`;
      });
      
      scheduleMessage += `üìã *–í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:* ${userSchedule.length}`;
      
      // Create inline keyboard with completion buttons for each scheduled appointment
      const keyboard = {
        inline_keyboard: []
      };
      
      userSchedule.forEach((callback, index) => {
        keyboard.inline_keyboard.push([
          {
            text: `‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${callback.clientName}`,
            callback_data: `complete_${callback.callbackId}`
          }
        ]);
      });
      
      await sendDirectMessage(chatId, scheduleMessage, { reply_markup: keyboard });
    }
  } else if (messageText === '/pending') {
    const pendingClients = await getUserPendingClients(chatId);
    
    if (pendingClients.length === 0) {
      const noPendingMessage = `
üìã *–ö–ª–∏–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é*

üì≠ *–£ –≤–∞—Å –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é*

üí° *–ö–ª–∏–µ–Ω—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫:*
1. –í—ã –Ω–∞–∂–º–µ—Ç–µ "–°–≤—è–∑–∞–ª–∏—Å—å" –Ω–∞ –∑–∞—è–≤–∫–µ –≤ –≥—Ä—É–ø–ø–µ
2. –°–æ–±–µ—Ä–µ—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
3. –î–æ —Ç–æ–≥–æ –∫–∞–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤–∏–∑–∏—Ç

üìû *–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –æ–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ*
`;
      
      await sendDirectMessage(chatId, noPendingMessage);
    } else {
      let pendingMessage = `üìã *–ö–ª–∏–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é*\n\n`;
      pendingMessage += `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–∑–∏—Ç–∞:\n\n`;
      
      // Create inline keyboard with buttons for each pending client
      const keyboard = {
        inline_keyboard: []
      };
      
      pendingClients.forEach((client, index) => {
        // Add client info to message
        pendingMessage += `${index + 1}. üë§ *${client.clientName}*\n`;
        pendingMessage += `   üìû ${client.phone}\n`;
        pendingMessage += `   üìç ${client.address}\n`;
        
        // Build service description
        let serviceDescription = client.detailedServiceType;
        if (client.problemDescription) {
          serviceDescription += `, ${client.problemDescription}`;
        }
        pendingMessage += `   üîß ${serviceDescription}\n`;
        
        // Show when contacted
        const contactedTime = new Date(client.createdAt).toLocaleString('ru-RU');
        pendingMessage += `   üìû –°–≤—è–∑–∞–ª–∏—Å—å: ${contactedTime}\n`;
        pendingMessage += `   ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞, –≥–æ—Ç–æ–≤ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é\n\n`;
        
        // Add button for this client
        keyboard.inline_keyboard.push([
          {
            text: `üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑–∏—Ç –∫ ${client.clientName}`,
            callback_data: `schedule_pending_${client.callbackId}`
          }
        ]);
      });
      
      pendingMessage += `üìä *–ì–æ—Ç–æ–≤—ã—Ö –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é:* ${pendingClients.length}`;
      
      await sendDirectMessage(chatId, pendingMessage, { reply_markup: keyboard });
    }
  } else if (messageText === '/cancel' && userStates.has(chatId)) {
    userStates.delete(chatId);
    await sendDirectMessage(chatId, '‚ùå –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
  } else {
    // Handle other messages
    const responseMessage = `
üìù *–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ*

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! 

ü§ñ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help

üìû *–î–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç* –ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Å–∞–π—Ç: [True Pros](http://localhost:3000)
`;

    await sendDirectMessage(chatId, responseMessage);
  }
};

// Set up event handlers for callback queries and messages
export const setupTelegramWebhook = () => {
  console.log('üîß Setting up Telegram bot event handlers...');
  
  // Handle callback queries (button presses)
  bot.on('callback_query', (callbackQuery) => {
    console.log('üîò Raw callback query received:', callbackQuery.data);
    handleCallbackQuery(callbackQuery);
  });
  
  // Handle direct messages
  bot.on('message', (message) => {
    console.log('üí¨ Message received from:', message.from.first_name, '- Text:', message.text);
    handleDirectMessage(message);
  });
  
  // Handle polling errors
  bot.on('polling_error', (error) => {
    console.error('‚ùå Telegram polling error:', error.message);
  });
  
  console.log('ü§ñ Telegram bot event handlers set up successfully');
};

// Set bot commands
export const setBotCommands = async () => {
  try {
    const commands = [
      { command: 'start', description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ' },
      { command: 'help', description: '–ü–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥' },
      { command: 'status', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã' },
      { command: 'schedule', description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã' },
      { command: 'pending', description: '–ö–ª–∏–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é' },
      { command: 'cancel', description: '–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ' }
    ];

    await bot.setMyCommands(commands);
    console.log('‚úÖ Bot commands set successfully');
    return true;
  } catch (error) {
    console.error('‚ùå Failed to set bot commands:', error.message);
    return false;
  }
};

// Test bot connection
export const testBotConnection = async () => {
  try {
    const me = await bot.getMe();
    console.log(`‚úÖ Telegram bot connected: @${me.username}`);
    
    // Set bot commands
    await setBotCommands();
    
    return true;
  } catch (error) {
    console.error('‚ùå Telegram bot connection failed:', error.message);
    return false;
  }
}; 